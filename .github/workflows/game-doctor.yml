name: Game Doctor

on:
  push:
  pull_request:

jobs:
  check:
    name: Run Game Doctor
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Game Doctor tests
        run: npm run test:doctor

      - name: Run Game Doctor
        run: node tools/game-doctor.mjs --strict --baseline=health/baseline.json

      - name: Upload Game Doctor report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: game-doctor-report
          if-no-files-found: ignore
          path: |
            health/report.json
            health/report.md

      - name: Comment Game Doctor results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = 'health/report.json';
            const marker = '<!-- game-doctor-report -->';

            const formatTableRow = (cells) => `| ${cells.join(' | ')} |`;
            const formatStatus = (ok) => ok ? '✅ Pass' : '❌ Fail';

            let bodySections = [];
            let summaryText = '⚠️ Game Doctor report was not generated.';
            let table = '';

            if (fs.existsSync(path)) {
              try {
                const report = JSON.parse(fs.readFileSync(path, 'utf8'));
                const total = report?.summary?.total ?? report?.games?.length ?? 0;
                const passing = report?.summary?.passing ?? report?.games?.filter(game => game.ok).length ?? 0;
                const failing = report?.summary?.failing ?? total - passing;
                summaryText = `**Summary:** ${passing}/${total} passing, ${failing} failing.`;

                if (Array.isArray(report?.games) && report.games.length) {
                  const header = formatTableRow(['Game', 'Status', 'Issues']);
                  const separator = formatTableRow(['---', '---', '---']);
                  const rows = report.games.map(game => {
                    const title = game.title || game.slug || `#${game.index}`;
                    const status = formatStatus(Boolean(game.ok));
                    const issues = Array.isArray(game.issues) ? game.issues.length : 0;
                    return formatTableRow([title, status, `${issues}`]);
                  });
                  table = [header, separator, ...rows].join('\n');
                } else {
                  table = '_No game entries were found in the report._';
                }
              } catch (error) {
                summaryText = `⚠️ Failed to parse ${path}: ${error.message}`;
              }
            }

            const { owner, repo } = context.repo;
            const { data: artifactData } = await github.rest.actions.listWorkflowRunArtifacts({
              owner,
              repo,
              run_id: context.runId,
            });

            const artifact = artifactData.artifacts.find((artifact) => artifact.name === 'game-doctor-report');
            let artifactSection = '_Artifact not available._';
            if (artifact) {
              const artifactUrl = `https://github.com/${owner}/${repo}/actions/runs/${context.runId}/artifacts/${artifact.id}`;
              artifactSection = `📎 [Download Game Doctor artifact](${artifactUrl})`;
            }

            bodySections.push(summaryText);
            if (table) bodySections.push(table);
            bodySections.push(artifactSection);

            const commentBody = [
              marker,
              '### 🩺 Game Doctor Report',
              '',
              ...bodySections,
              '',
              marker,
            ].join('\n');

            const { data: comments } = await github.rest.issues.listComments({
              owner,
              repo,
              issue_number: context.issue.number,
              per_page: 100,
            });

            const existing = comments.find(comment => comment.body?.includes(marker));

            if (existing) {
              await github.rest.issues.updateComment({
                owner,
                repo,
                comment_id: existing.id,
                body: commentBody,
              });
            } else {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: context.issue.number,
                body: commentBody,
              });
            }
